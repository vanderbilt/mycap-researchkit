/*
 Copyright (c) 2020, Dr David W. Evans. All rights reserved.
 
 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:
 
 1.  Redistributions of source code must retain the above copyright notice, this
 list of conditions and the following disclaimer.
 
 2.  Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation and/or
 other materials provided with the distribution.
 
 3.  Neither the name of the copyright holder(s) nor the names of any contributors
 may be used to endorse or promote products derived from this software without
 specific prior written permission. No license is granted to the trademarks of
 the copyright holders even if such marks are included in this software.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#import <ResearchKit/ORKResult.h>


NS_ASSUME_NONNULL_BEGIN

/**
 The `ORKLeftRightJudgementResult` class represents the result of a single attempt within an ORKLeftRightJudgementStep.
 
 A left/right judgement result is typically generated by the framework as the task proceeds. When the task completes, it may be appropriate to serialize the sample for transmission to a server or to immediately perform analysis on it.
 */
ORK_CLASS_AVAILABLE
@interface ORKLeftRightJudgementResult: ORKResult

/**
 The `imageNumber` property is the current number of the image (beginning with '1') presented within the entire sequence of the task.
 */
@property (nonatomic, assign) NSInteger imageNumber;

/**
 The `imageName` property is the file name of the image presented (without the .png extension).
 */
@property (nonatomic, copy) NSString *imageName;

/**
 The `viewPresented` property is the view of the hand or foot presented in the image and as seen by the user.
 */
@property (nonatomic, copy) NSString *viewPresented;

/**
 The `orientationPresented` property is the relative anatomical description (medial, lateral or neutral), of the direction towards which the fingers (hand) or toes (foot) point, as presented within the image.
 */
@property (nonatomic, copy) NSString *orientationPresented;

/**
 The `rotationPresented` property is the angle (measured in degrees, with 30 degree intervals), in either a clockwise or anti-clockwise direction (with 12 o'clock as zero), towards which the fingers (hand) or toes (foot) point as presented within the image.
 */
@property (nonatomic, assign) NSInteger rotationPresented;

/**
 The `sidePresented` property is the side of the body presented in the image.
 */
@property (nonatomic, copy) NSString *sidePresented;

/**
 The `sideSelected` property corresponds to the button tapped by the user as an answer.
 */
@property (nonatomic, copy, nullable) NSString *sideSelected;

/**
 The 'sideMatch' property is a Boolean value indicating whether the value of sideSelected matches that of sidePresented. The value of this property is `YES` when there is a match, and `NO` otherwise.
 */
@property (nonatomic, assign) BOOL sideMatch;

/**
 The 'timedOut' property is a Boolean value indicating whether the the attempt timed out, based on the value set in the non-zero 'timeout' parameter (in seconds), before a selection was made. The value of this property is `YES` when the timeout value was reached, and `NO` otherwise. When YES, reactionTime values will not contribute to task summaries (means and standard deviations).
 */
@property (nonatomic, assign) BOOL timedOut;

/**
 The `reactionTime` property is the time taken (in seconds) for a response to an image, whether the 'sideMatch' value is YES or NO, equal to the difference between timestamps from when the image is displayed to when the button is pressed.
 */
@property (nonatomic, assign) double reactionTime;

/**
 The `leftImages` property is the total number of left images presented so far during the task.
 */
@property (nonatomic, assign) NSInteger leftImages;

/**
 The `rightImages` property is the total number of right images presented so far during the task.
 */
@property (nonatomic, assign) NSInteger rightImages;

/**
The `leftPercentCorrect` property is the percentage of correct 'sideMatch' answers for all images in the task so far where sidePresented value was 'Left'. This updates with every image presented in the set.
*/
@property (nonatomic, assign) double leftPercentCorrect;

/**
The `rightPercentCorrect` property is the percentage of correct 'sideMatch' answers for all images in the task so far where sidePresented value was 'Right'. This updates with every image presented in the set.
*/
@property (nonatomic, assign) double rightPercentCorrect;

/**
The `percentTimedOut` property is the percentage of attempts in the task so far where 'timedOut' value was YES. This updates with every image presented in the set.
*/
@property (nonatomic, assign) double percentTimedOut;

/**
 The `leftMeanReactionTime` property is the mean (average) of reactionTime (in seconds) for all images in the task so far where sidePresented value was 'Left' and sideMatch value was YES (i.e. correct matches only). This updates with every image presented in the set.
 */
@property (nonatomic, assign) double leftMeanReactionTime;

/**
 The `rightMeanReactionTime` property is the mean (average) of reactionTime (in seconds) for all images in the task so far where sidePresented value was 'Right' and sideMatch value was YES (i.e. correct matches only). This updates with every image presented in the set.
 */
@property (nonatomic, assign) double rightMeanReactionTime;

/**
 The `leftSDReactionTime` property is the standard deviation (a measure of distribution) of reactionTime (in seconds) for all images in the task so far where sidePresented value was 'Left'. This updates with every image presented in the set.
 */
@property (nonatomic, assign) double leftSDReactionTime;

/**
 The `rightSDReactionTime` property is the standard deviation (a measure of distribution) of reactionTime (in seconds) for all images in the task so far where sidePresented value was 'Right'. This updates with every image presented in the set.
 */
@property (nonatomic, assign) double rightSDReactionTime;


@end

NS_ASSUME_NONNULL_END

